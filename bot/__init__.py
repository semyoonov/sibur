import asyncio
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from .keyboards import *
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.models import Problems, Person
from datetime import datetime
from tortoise.expressions import Q
import os


from dotenv import load_dotenv

load_dotenv()

bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher()
form_router = Router()
dp.include_router(form_router)

users = {}
statusik = {'START': '–ù–û–í–ê–Ø üí°', 'IN_PROGRESS': '–í –ü–†–û–¶–ï–°–°–ï ‚è≥', 'END': '–ó–ê–í–ï–†–®–ï–ù–ù–ê–Ø üèÅ'}
vids = {'INFO': '‚Ñπ –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ô', 'WARN': '‚ùó–ü–†–ï–î–£–ü–†–ï–ñ–î–ê–Æ–©–ò–ô', 'CRIT': '‚ö† –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô'}

url_site = f"{os.getenv("WEB_URL")}"

typesss = {1: '–û–±—â–µ–µ',
           2: '–•–∏–º–∏—è',
           3: '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞',
           4: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
           5: '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ',
           6: '–û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞',
           7: '–ó–∞–∫—É–ø–∫–∏',
           8: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
           9: '–õ–æ–≥–∏—Å—Ç–∏–∫–∞',
           10: '–°–µ—Ç–∏, —Å–≤—è–∑–∏'}


class Form(StatesGroup):
    login = State()
    password = State()

    desc = State()
    message = State()

    number = State()
    fini = State()


@form_router.message(CommandStart())
async def start(msg: Message, state: FSMContext):
    users[str(msg.from_user.id)] = [None, [None, None, None, None]]

    pers = await Person.filter(tg_id=str(msg.from_user.id))
    if pers:
        person = pers[0]
        person.tg_id = None
        await person.save()

    await msg.answer(
        f'–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –≤ –∫–æ–º–ø–∞–Ω–∏–∏ <u>"–°–ò–ë–£–†"</u> üõ¢\n\n–ù–µ—Ç —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ: {url_site}\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω, –∞ –∑–∞—Ç–µ–º –ø–∞—Ä–æ–ª—å (—Ä–∞–∑–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)üîê',
        parse_mode='html')
    await state.set_state(Form.login)


@form_router.message(Form.login)
async def login(msg: Message, state: FSMContext):
    await state.clear()
    data = await Person.filter(login=msg.text)
    if data:
        if msg.text == data[0].login:
            users[str(msg.from_user.id)][0] = msg.text
            await state.set_state(Form.password)
    else:
        await bot.send_message(msg.from_user.id, "–¢–∞–∫–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –Ω–µ—Ç‚ùå")


@form_router.message(Form.password)
async def password(msg: Message, state: FSMContext):
    await state.clear()
    pers = await Person.filter(login=users[str(msg.from_user.id)][0])
    person = pers[0]
    if person.check_password(msg.text):

        person.tg_id = str(msg.from_user.id)
        await person.save()

        await bot.send_message(msg.from_user.id,
                               f"{person.full_name} –≤—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å‚úÖ\n\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ /log_out\n–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –≤–≤–µ–¥–∏—Ç–µ /menu")
    else:
        await bot.send_message(msg.from_user.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å‚ùå")


@form_router.message(Command('menu'))
async def menu(msg: Message, state: FSMContext):
    person = await Person.filter(tg_id=str(msg.from_user.id))
    if person:
        users[str(msg.from_user.id)] = [None, [None, None, None, None]]
        await bot.send_message(msg.from_user.id, '–≠—Ç–æ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏, –≤—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ñ—É–Ω–∫—Ü–∏—é ‚¨á',
                               reply_markup=keyboard_menu)


@form_router.message(Command('log_out'))
async def log_out(msg: Message, state: FSMContext):
    users.pop(str(msg.from_user.id))
    pers = await Person.filter(tg_id=str(msg.from_user.id))
    if pers:
        person = pers[0]
        person.tg_id = None
        await person.save()
        await bot.send_message(msg.from_user.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏‚Ü©')


@form_router.callback_query(F.data == 'problem')
async def problem(call: CallbackQuery, state: FSMContext):
    person = await Person.filter(tg_id=str(call.from_user.id))
    if person:
        await bot.send_message(call.from_user.id,
                               '<u><i>–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞</i></u> - –æ–ø–∏—à–∏ –µ–µ –∏ –æ–Ω–∞ –¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ "–°–∏–±—É—Ä" ‚ö†\n\n–ü—Ä–æ–±–ª–µ–º–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑:\n   <b>¬∑<u>–í–∏–¥–∞ –ø—Ä–æ–±–ª–µ–º—ã</u></b>\n   <b>¬∑<u>–¢–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã</u></b>\n   <b>¬∑<u>–û–ø–∏—Å–∞–Ω–∏—è</u></b>\n   <b>¬∑<u>–°–æ–æ–±—â–µ–Ω–∏—è –∫ –ø—Ä–æ–±–ª–µ–º–µ</u></b>',
                               reply_markup=keyboard_add_prob, parse_mode='html')


@form_router.callback_query(F.data == 'contin_add')
async def contin_add(call: CallbackQuery, state: FSMContext):
    person = await Person.filter(tg_id=str(call.from_user.id))
    if person:
        await bot.send_message(call.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∏–∂–µ üîΩ", reply_markup=keyboard_vid)


@form_router.callback_query(F.data.startswith('vid '))
async def vid(call: CallbackQuery, state: FSMContext):
    person = await Person.filter(tg_id=str(call.from_user.id))
    if person:
        ostatok = call.data.replace('vid ', '')
        users[str(call.from_user.id)][1][0] = ostatok

        await bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã –Ω–∏–∂–µ üîΩ', reply_markup=keyboard_type)


@form_router.callback_query(F.data.startswith('type '))
async def type(call: CallbackQuery, state: FSMContext):
    person = await Person.filter(tg_id=str(call.from_user.id))
    if person:
        ostatok = int(call.data.replace('type ', ''))
        users[str(call.from_user.id)][1][3] = ostatok

        await bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:')
        await state.set_state(Form.desc)


@form_router.message(Form.desc)
async def desc(msg: Message, state: FSMContext):
    await state.clear()
    person = await Person.filter(tg_id=str(msg.from_user.id))
    if person:
        users[str(msg.from_user.id)][1][1] = msg.text

        await bot.send_message(msg.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:')
        await state.set_state(Form.message)


@form_router.message(Form.message)
async def message(msg: Message, state: FSMContext):
    await state.clear()
    person = await Person.filter(tg_id=str(msg.from_user.id))
    if person:
        users[str(msg.from_user.id)][1][2] = msg.text

        v = users[str(msg.from_user.id)][1][0]
        t = users[str(msg.from_user.id)][1][3]
        await bot.send_message(msg.from_user.id,
                               f'‚ö† –í–∞—à–∞ –Ω–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞:\n\n<b>–í–∏–¥</b>:\n {vids[v]}\n\n<b>–¢–∏–ø</b>:\n {typesss[t]}\n\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>:\n {users[str(msg.from_user.id)][1][1]}\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã</b>:\n {users[str(msg.from_user.id)][1][2]}',
                               reply_markup=keyboard_adding, parse_mode='html')


@form_router.callback_query(F.data == 'wrong_add')
async def wrong_add(call: CallbackQuery, state: FSMContext):
    person = await Person.filter(tg_id=str(call.from_user.id))
    if person:
        await state.clear()
        await bot.delete_message(call.message.chat.id, call.message.message_id)


@form_router.callback_query(F.data == 'adding')
async def adding(call: CallbackQuery, state: FSMContext):
    person = await Person.filter(tg_id=str(call.from_user.id))
    if person:
        prior = users[str(call.from_user.id)][1][0]
        descript = users[str(call.from_user.id)][1][1]
        mess = users[str(call.from_user.id)][1][2]
        type_int = users[str(call.from_user.id)][1][3]

        await Problems.create(priority=prior, type_id=type_int, description=descript, message=mess, status="START",
                              time=datetime.now())
        users[str(call.from_user.id)][1] = [None, None, None, None]
        await bot.send_message(call.from_user.id,
                               '–ü—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫üìå‚úÖ\n\n–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞—Ç—É—Å–∞ –ø—Ä–æ–±–ª–µ–º—ã —á–µ—Ä–µ–∑ /menu –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É "–ú–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã"')
        await asyncio.sleep(1)
        await bot.delete_message(call.message.chat.id, call.message.message_id)


@form_router.callback_query(F.data == 'show')
async def show(call: CallbackQuery, state: FSMContext):
    person = await Person.filter(tg_id=str(call.from_user.id))
    if person:
        data = await Problems.filter(Q(status='START') | Q(status='IN_PROGRESS'))

        str_update = "<b>–°–ü–ò–°–û–ö –ü–†–û–ë–õ–ï–ú –°–ï–ô–ß–ê–°üìÅ:</b>\n\n"
        for val in data:
            str_update += f"<blockquote>Id: <b>{val.id}</b> –í–∏–¥ –ø—Ä–æ–±–ª–µ–º—ã: <b>{vids[str(val.priority.value)]}</b>\n–¢–∏–ø: <i>{typesss[val.type_id]}</i>\n<b>{val.description}</b>\n–û–ø–∏—Å–∞–Ω–∏–µ: <i>{val.message}</i>\n–°—Ç–∞—Ç—É—Å: <u>{statusik[val.status.value]}</u></blockquote>\n\n"
        await bot.send_message(call.from_user.id, str_update, reply_markup=keyboard_myproblem, parse_mode='html')


@form_router.callback_query(F.data == 'take_problem')
async def take_problem(call: CallbackQuery, state: FSMContext):
    person = await Person.filter(tg_id=str(call.from_user.id))
    if person:
        await bot.send_message(call.from_user.id, '–ß—Ç–æ–±—ã –≤–∑—è—Ç—å –ø—Ä–æ–±–ª–µ–º—É –Ω–∞ —Å–µ–±—è, –≤–≤–µ–¥–∏—Ç–µ <b><u>ID</u></b> –ø—Ä–æ–±–ª–µ–º—ã üî¢:',
                               reply_markup=keyboard_wrong_add, parse_mode='html')
        await state.set_state(Form.number)


@form_router.callback_query(F.data == 'update')
async def update(call: CallbackQuery, state: FSMContext):
    person = await Person.filter(tg_id=str(call.from_user.id))
    if person:
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await show(call, state)


@form_router.message(Form.number)
async def number(msg: Message, state: FSMContext):
    await state.clear()
    person = await Person.filter(tg_id=str(msg.from_user.id))
    if person:
        data = await Problems.filter(id=int(msg.text))

        if data:

            keyboard_take_problem = InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="–í–∑—è—Ç—å –ø—Ä–æ–±–ª–µ–º—É üìé", callback_data=f'take {msg.text}')],
                [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –≤–∑—è—Ç–∏–µ ‚ùå", callback_data='wrong_add')]
            ])

            await bot.send_message(msg.from_user.id,
                                   f'<i>–ü—Ä–æ–±–ª–µ–º–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å:</i>\n\n<blockquote>Id: <b>{data[0].id}</b> –í–∏–¥ –ø—Ä–æ–±–ª–µ–º—ã: <b>{vids[str(data[0].priority.value)]}</b>\n–¢–∏–ø: <i>{typesss[data[0].type_id]}</i>\n<b>{data[0].description}</b>\n–û–ø–∏—Å–∞–Ω–∏–µ: <i>{data[0].message}</i>\n–°—Ç–∞—Ç—É—Å: <u>{statusik[data[0].status.value]}</u></blockquote>',
                                   reply_markup=keyboard_take_problem, parse_mode='html')
        else:
            await bot.send_message(msg.from_user.id,
                                   '–¢–∞–∫–æ–≥–æ ID –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ <b><u>ID</u></b> –ø—Ä–æ–±–ª–µ–º—ã —á–∏—Å–ª–æ–º –µ—â–µ —Ä–∞–∑ üî¢:',
                                   reply_markup=keyboard_wrong_add, parse_mode='html')
            await state.set_state(Form.number)


@form_router.callback_query(F.data.startswith('take '))
async def take(call: CallbackQuery, state: FSMContext):
    person = await Person.filter(tg_id=str(call.from_user.id))

    if person:
        print(call.data)
        print(call.data.replace('take ', ''))
        id = int(call.data.replace('take ', ''))
        proble = await Problems.filter(id=id)
        if proble:
            problem = proble[0]
            problem.status = 'IN_PROGRESS'
            per = person[0]
            problem.responsible = per

            await problem.save()
            await bot.send_message(call.from_user.id,
                                   '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏—Å—å –∑–∞ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã ‚úÖ\n\n–ü–æ—Å–ª–µ –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–ª–µ–º—ã –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ú–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã üëÄ" –≤ /menu')


@form_router.callback_query(F.data == 'my')
async def my(call: CallbackQuery, state: FSMContext):
    person = await Person.filter(tg_id=str(call.from_user.id))
    if person:
        per = person[0]
        proble = await Problems.filter(responsible=per, status="IN_PROGRESS")
        if proble:
            str_update = "<b>–°–ü–ò–°–û–ö –í–ê–®–ò–• –ü–†–û–ë–õ–ï–úüë•:</b>\n\n"
            for problem in proble:
                str_update += f"<blockquote>Id: <b>{problem.id}</b> –í–∏–¥ –ø—Ä–æ–±–ª–µ–º—ã: <b>{vids[str(problem.priority.value)]}</b>\n–¢–∏–ø: <i>{typesss[problem.type_id]}</i>\n<b>{problem.description}</b>\n–û–ø–∏—Å–∞–Ω–∏–µ: <i>{problem.message}</i>\n–°—Ç–∞—Ç—É—Å: <u>{statusik[problem.status.value]}</u></blockquote>\n\n"

            await bot.send_message(call.from_user.id, str_update, reply_markup=keyboard_my, parse_mode='html')


@form_router.callback_query(F.data == 'finish')
async def finish(call: CallbackQuery, state: FSMContext):
    person = await Person.filter(tg_id=str(call.from_user.id))
    if person:
        await bot.send_message(call.from_user.id, '–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É, –≤–≤–µ–¥–∏—Ç–µ <b><u>ID</u></b> –ø—Ä–æ–±–ª–µ–º—ã üèÅ:',
                               reply_markup=keyboard_wrong_add, parse_mode='html')
        await state.set_state(Form.fini)


@form_router.message(Form.fini)
async def fini(msg: Message, state: FSMContext):
    await state.clear()
    person = await Person.filter(tg_id=str(msg.from_user.id))
    if person:
        per = person[0]
        proble = await Problems.filter(responsible=per)
        for i in proble:
            if str(i.id) == msg.text:
                i.status = 'END'
                i.responsible = None
                await i.save()
                await bot.send_message(msg.from_user.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É üèÅ', parse_mode='html')
                break
            else:
                await bot.send_message(msg.from_user.id,
                                       '–¢–∞–∫–æ–≥–æ ID –Ω–µ—Ç\n–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É, –≤–≤–µ–¥–∏—Ç–µ <b><u>ID</u></b> –ø—Ä–æ–±–ª–µ–º—ã üèÅ:',
                                       reply_markup=keyboard_wrong_add, parse_mode='html')
                await state.set_state(Form.fini)
                break


async def setup():
    await dp.start_polling(bot)
