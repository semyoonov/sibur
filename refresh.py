import asyncio
from time import timezone

import database
from datetime import datetime, timezone, timedelta
from database.models import Problems, Person
from mailing.use_email import Email
from dotenv import load_dotenv

load_dotenv()

import bot
from aiogram.types import InlineKeyboardMarkup
from aiogram import types

rename_type = {
    "INFO": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è",
    "CRIT": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è",
    "WARN": "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∞—è"
}


async def check_and_send_emails():
    while True:
        recent_time = datetime.now(timezone(timedelta(hours=0)))
        await asyncio.sleep(10)

        problems = await Problems.all()
        persons = await Person.all()



        for problem in problems:

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="–í–∑—è—Ç—å –ø—Ä–æ–±–ª–µ–º—É üìé", callback_data=f'take {str(problem.id)}')]])

            if problem.time >= recent_time:

                for person in persons:
                    if (await problem.type.first()).id in [1, (await person.type.first()).id]:
                        email_message = Email(
                            priority=problem.priority,
                            receiver_email=person.email,
                            description=problem.description,
                            message=problem.message,
                            status=problem.status,
                            type=(await problem.type.first()).full_name,
                            # author=problem.responsible.full_name if problem.responsible else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
                            time=problem.time
                        )

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email (–≤—ã–∑–æ–≤ send_new_email –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º)
                        await asyncio.to_thread(email_message.send_new_email)
                        if person.tg_id:
                            temp = (await problem.type.first()).full_name

                            await bot.bot.send_message(chat_id=person.tg_id,
                                                       text=f'‚ùó<u><b>–í–ù–ò–ú–ê–ù–ò–ï</b></u>‚ùó:\n\n'
                                                            f'<b>Id: {problem.id}</b>\n'
                                                            f'<b>{problem.description}</b>\n'
                                                            f'{problem.message}\n\n'
                                                            f'–í–∏–¥: <b>{rename_type[problem.priority.value]}</b>\n'
                                                            f'–¢–∏–ø: <b>{temp}</b>\n'
                                                            f'–û—Ç: {problem.time.strftime('%Y-%m-%d %H:%M:%S')}\n\n'
                                                            f'–ü—Ä–æ–±–ª–µ–º–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ —Å–ø–∏—Å–∫–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º –≤ /menu',
                                                       parse_mode='html',
                                                       reply_markup=keyboard)


async def main():
    asyncio.set_event_loop(asyncio.new_event_loop())
    await database.setup()
    await asyncio.gather(bot.setup(), check_and_send_emails())
    # await bot.setup()
    # await check_and_send_emails()


if __name__ == '__main__':
    asyncio.run(main())
